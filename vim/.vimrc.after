" show hidden files in NERDTree
let NERDTreeShowHidden=1

function! SyntaxItem()
    return synIDattr(synID(line("."),col("."),1),"name")
endfunction

set statusline=%f%=%{SyntaxItem()}\ %y\ \ [Line\ %l\ of\ %L]\ \ [Column\ %v]

" ctrlp should always use the path that vim has open, not the directory of
" the file in the current buffer
let g:ctrlp_working_path_mode = ''

" ctrlp should follow symlinkies (but avoid recursive symlinks)
let g:ctrlp_follow_symlinks = 1

" Don't let CtrlP open files in non-writeable buffers like NERDTree
let g:ctrlp_map = ''
function! CtrlPInBestWriteableBuffer()
    let c = 0
    let wincount = winnr('$')
    while !empty(getbufvar(+expand("<abuf>"), "&buftype")) && c < wincount
        exec 'wincmd w'
        let c = c + 1
    endwhile
    exec 'CtrlP'
endfunction
nnoremap <C-p> :call CtrlPInBestWriteableBuffer()<CR>

" override trailing whitespace to red
highlight ExtraWhitespace ctermbg=red ctermfg=red guibg=red guifg=red
autocmd InsertLeave * set list listchars=trail:•,tab:▸\ 
autocmd InsertEnter * set list listchars=tab:▸\ 

" whitespace
set nowrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set list listchars=trail:•,tab:▸\ 

" prevent new line at end of file
set binary
set noeol

" Force filetype for certain file extensions
autocmd BufNewFile,BufRead *.html set filetype=htmljinja
autocmd BufNewFile,BufRead *.scss set filetype=scss

" 2 space tabs for frontendy stuff
autocmd Filetype html,htmldjango,javascript,scss,markdown,svss,html.handlebars setlocal shiftwidth=2 softtabstop=2 tabstop=2 expandtab

" Don't include colorcolumn for certain filetypes
autocmd FileType htmljinja,qf setlocal colorcolumn=

" fix problem where MacVim sets noexpandtab after reloading externally modified file
autocmd BufRead * set expandtab

" spacebar shortcut for code folding
nnoremap <space> za
vnoremap <space> zf

" open splits to the right/bottom instead of left/top
set splitright
set splitbelow

" Syntastic settings

"let g:syntastic_auto_loc_list = 0
"let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

let g:syntastic_python_checkers = ['python', 'pyflakes']
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_sass_checkers = ['scss_lint']
let g:syntastic_scss_checkers = ['scss_lint']
let g:syntastic_mode_map = {'mode': 'active'}

if emoji#available()
    let g:syntastic_error_symbol = emoji#for('x')
    let g:syntastic_style_error_symbol = emoji#for('interrobang')
    let g:syntastic_warning_symbol = emoji#for('warning')
    let g:syntastic_style_warning_symbol = emoji#for('poop')

    let g:pymode_lint_todo_symbol = emoji#for('poop')
    let g:pymode_lint_comment_symbol = emoji#for('warning')
    let g:pymode_lint_visual_symbol = emoji#for('warning')
    let g:pymode_lint_error_symbol = emoji#for('x')
    let g:pymode_lint_info_symbol = emoji#for('poop')
    let g:pymode_lint_pyflakes_symbol = emoji#for('warning')
endif

let g:pymode_lint_cwindow = 0
let g:pymode_rope_completion = 0

" TODO don't do this (do in amino colorscheme)
highlight link SyntasticErrorSign SignColumn
highlight link SyntasticWarningSign SignColumn
highlight link SyntasticStyleErrorSign SignColumn
highlight link SyntasticStyleWarningSign SignColumn

" vertical line at the 100th character
"if exists('+colorcolumn')
set colorcolumn=100
"endif

" The Silver Searcher
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    " let g:ctrlp_use_caching = 0
    let g:ackprg = 'ag --nogroup --nocolor --column'
endif

" ignore some directories in plugins that obey wildignore
" NOTE: ack uses ~/.ackrc
set wildignore+=*/.webassets-cache/*
set wildignore+=*/node_modules/*
set wildignore+=*/www_js/_build/*
set wildignore+=*/ghost/core/*
set wildignore+=*/ghost/content/themes/casper/*
set wildignore+=*.db,*.svg,*.map,*.jpg,*.jpeg,*.gif,*.png

let g:javascript_plugin_flow = 1
let g:jsx_ext_required = 0

if has("gui_running")
  "colorscheme nick
  "colorscheme OceanicNext
  "let g:airline_theme='oceanicnext'
  colorscheme amino
endif
